<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
    :root {
        --primary-color: #2563eb;
        --secondary-color: #475569;
        --success-color: #16a34a;
        --warning-color: #ca8a04;
        --error-color: #dc2626;
        --background-color: #f8fafc;
        --card-background: #ffffff;
    }

    body {
        background-color: var(--background-color);
        font-family: 'Inter', sans-serif;
    }

    .main-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .dashboard-card {
        background: var(--card-background);
        border-radius: 16px;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .section-header {
        display: flex;
        align-items: center;
        padding-bottom: 1rem;
        margin-bottom: 1.5rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .section-header i {
        font-size: 1.5rem;
        color: var(--primary-color);
        margin-right: 0.75rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--secondary-color);
        margin: 0;
    }

    .input-group {
        position: relative;
        margin-bottom: 1.5rem;
    }

    .input-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--secondary-color);
    }

    .input-group input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        transition: all 0.2s;
    }

    .input-group input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
    }

    .storage-options {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .storage-option {
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        padding: 1rem;
        cursor: pointer;
        transition: all 0.2s;
    }

    .storage-option:hover {
        border-color: var(--primary-color);
        background-color: rgba(37, 99, 235, 0.05);
    }

    .storage-option.active {
        border-color: var(--primary-color);
        background-color: rgba(37, 99, 235, 0.1);
    }

    .storage-option i {
        font-size: 1.5rem;
        margin-right: 0.5rem;
        color: var(--primary-color);
    }

    .log-container {
        max-height: 400px;
        overflow-y: auto;
        padding: 1rem;
        background: #f8fafc;
        border-radius: 12px;
    }

    .log-item {
        background: white;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .log-item:last-child {
        margin-bottom: 0;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .status-badge.success {
        background-color: rgba(22, 163, 74, 0.1);
        color: var(--success-color);
    }

    .status-badge.error {
        background-color: rgba(220, 38, 38, 0.1);
        color: var(--error-color);
    }

    .btn-primary {
        background-color: var(--primary-color);
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s;
    }

    .btn-primary:hover {
        background-color: #1d4ed8;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background-color: #f8fafc;
        color: var(--secondary-color);
        border: 1px solid #e2e8f0;
    }

    .btn-secondary:hover {
        background-color: #f1f5f9;
        color: var(--primary-color);
    }

    .tooltip-icon {
        color: var(--secondary-color);
        margin-left: 0.5rem;
        cursor: help;
    }

    .progress-bar {
        height: 8px;
        background-color: #e2e8f0;
        border-radius: 4px;
        overflow: hidden;
        margin: 1rem 0;
    }

    .progress-bar .fill {
        height: 100%;
        background-color: var(--primary-color);
        width: 0%;
        transition: width 0.3s ease;
    }
</style>

<div class="main-container">
    <div class="dashboard-card">
        <div class="section-header">
            <i class="fas fa-cloud-download-alt"></i>
            <h2 class="section-title">Download Configuration</h2>
        </div>

        <!-- Batch Configuration -->
        <div class="section-header">
            <i class="fas fa-layer-group"></i>
            <h3 class="section-title">Batch Configuration</h3>
            <i class="fas fa-info-circle tooltip-icon" title="Configure how many records to process in this batch"></i>
        </div>

        <div class="row g-3">
            <div class="col-md-6">
                <div class="input-group">
                    <label for="skip">Skip Records</label>
                    <input type="number" id="skip" name="skip" min="0" placeholder="Number of records to skip"
                        title="Start from this record number">
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <label for="take">Take Records</label>
                    <input type="number" id="take" name="take" min="1" placeholder="Number of records to process"
                        title="Number of records to process in this batch">
                </div>
            </div>
        </div>

        <div class="text-muted mb-4">
            <i class="fas fa-database me-2"></i>
            Total available records: <strong>
                <%= totalCount %>
            </strong>
        </div>

        <!-- Storage Options -->
        <div class="section-header">
            <i class="fas fa-hdd"></i>
            <h3 class="section-title">Storage Options</h3>
        </div>

        <div class="storage-options">
            <div class="storage-option active" data-storage="local">
                <i class="fas fa-folder"></i>
                <span>Local Storage</span>
                <p class="text-muted small mt-2">Store files in the local file system</p>
            </div>
            <div class="storage-option" data-storage="minio">
                <i class="fas fa-cloud"></i>
                <span>MinIO Storage</span>
                <p class="text-muted small mt-2">Store files in MinIO object storage</p>
            </div>
        </div>

        <!-- MinIO Configuration -->
        <div id="minioConfig" class="d-none">
            <div class="section-header">
                <i class="fas fa-cogs"></i>
                <h3 class="section-title">MinIO Configuration</h3>
            </div>

            <div class="row g-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <label for="endpoint">Endpoint URL</label>
                        <input type="text" id="endpoint" placeholder="http://your-minio-server:9000"
                            title="MinIO server endpoint URL">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <label for="bucket">Bucket Name</label>
                        <input type="text" id="bucket" placeholder="your-bucket-name" title="Target bucket name">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <label for="accessKeyId">Access Key ID</label>
                        <input type="text" id="accessKeyId" placeholder="Enter Access Key ID"
                            title="MinIO access key ID">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <label for="secretAccessKey">Secret Access Key</label>
                        <input type="password" id="secretAccessKey" placeholder="Enter Secret Access Key"
                            title="MinIO secret access key">
                    </div>
                </div>
            </div>

            <button class="btn btn-secondary w-100 mt-3" onclick="testMinioConnection()">
                <i class="fas fa-plug me-2"></i>Test Connection
            </button>
        </div>

        <!-- Action Buttons -->
        <div class="d-flex justify-content-between mt-4">
            <button class="btn btn-secondary" onclick="testDownload()">
                <i class="fas fa-vial me-2"></i>Test Download (1 file)
            </button>
            <button class="btn btn-primary" onclick="startDownload()">
                <i class="fas fa-play me-2"></i>Start Download
            </button>
        </div>
    </div>

    <!-- Download Logs -->
    <div class="dashboard-card">
        <div class="section-header">
            <i class="fas fa-history"></i>
            <h2 class="section-title">Download History</h2>
        </div>

        <div class="log-container">
            <% logs.forEach(log=> { %>
                <div class="log-item">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="status-badge <%= log.status === 'success' ? 'success' : 'error' %>">
                            <i class="fas <%= log.status === 'success' ? 'fa-check' : 'fa-times' %> me-1"></i>
                            <%= log.status %>
                        </span>
                        <small class="text-muted">
                            <%= new Date(log.createdAt).toLocaleString() %>
                        </small>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong class="text-primary">
                                <i class="fas fa-table me-2"></i>
                                <%= log.nama_table %>
                            </strong>
                        </div>
                        <div class="text-muted">
                            <i class="fas fa-list-ol me-2"></i>
                            Processed: <%= log.take %> records (skipped <%= log.skip %>)
                        </div>
                    </div>
                    <div class="mt-2 small">
                        <i class="fas <%= log.type === 'local' ? 'fa-folder' : 'fa-cloud' %> me-2"></i>
                        <%= log.type==='local' ? 'Local Storage' : 'MinIO Storage' %>
                    </div>
                </div>
                <% }) %>
        </div>
    </div>
</div>

<script>
    document.querySelectorAll('.storage-option').forEach(option => {
        option.addEventListener('click', function () {
            // Remove active class from all options
            document.querySelectorAll('.storage-option').forEach(opt => {
                opt.classList.remove('active');
            });

            // Add active class to clicked option
            this.classList.add('active');

            // Show/hide MinIO config
            const isMinIO = this.dataset.storage === 'minio';
            document.getElementById('minioConfig').classList.toggle('d-none', !isMinIO);
        });
    });

    async function testMinioConnection() {
        const endpoint = document.getElementById('endpoint').value;
        const accessKeyId = document.getElementById('accessKeyId').value;
        const secretAccessKey = document.getElementById('secretAccessKey').value;
        const bucket = document.getElementById('bucket').value;

        if (!endpoint || !accessKeyId || !secretAccessKey || !bucket) {
            showAlert('Please fill in all MinIO configuration fields', 'error');
            return;
        }

        try {
            const response = await fetch('/test-s3', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    endpoint,
                    accessKeyId,
                    secretAccessKey,
                    bucket
                })
            });

            const result = await response.json();
            showAlert(
                result.success ? 'MinIO connection successful!' : 'MinIO connection failed: ' + result.error,
                result.success ? 'success' : 'error'
            );
        } catch (error) {
            showAlert('Error testing MinIO connection: ' + error.message, 'error');
        }
    }

    function showAlert(message, type = 'info') {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
        alertDiv.style.zIndex = '1050';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        document.body.appendChild(alertDiv);

        // Auto dismiss after 5 seconds
        setTimeout(() => {
            alertDiv.remove();
        }, 5000);
    }

    async function testDownload() {
        // Get selected storage type
        const selectedStorage = document.querySelector('.storage-option.active').dataset.storage;
        const payload = {
            downloadType: selectedStorage
        };

        // Get the button element directly
        const testBtn = document.querySelector('button[onclick="testDownload()"]');
        const originalText = testBtn.innerHTML;

        try {
            // Show loading indicator
            testBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Testing...';
            testBtn.disabled = true;

            // If MinIO is selected, add credentials
            if (selectedStorage === 'minio') {
                const endpoint = document.getElementById('endpoint').value;
                const accessKeyId = document.getElementById('accessKeyId').value;
                const secretAccessKey = document.getElementById('secretAccessKey').value;
                const bucket = document.getElementById('bucket').value;

                // Validate MinIO credentials
                if (!endpoint || !accessKeyId || !secretAccessKey || !bucket) {
                    showAlert('Please fill in all MinIO configuration fields', 'error');
                    return;
                }

                Object.assign(payload, {
                    endpoint,
                    accessKeyId,
                    secretAccessKey,
                    bucket
                });
            }

            const response = await fetch('/test-download', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();

            if (result.success) {
                showAlert('Test download completed successfully!', 'success');
            } else {
                showAlert(`Test download failed: ${result.error}`, 'error');
            }
        } catch (error) {
            console.error('Test download error:', error);
            showAlert(`Error during test download: ${error.message}`, 'error');
        } finally {
            // Reset button state
            testBtn.innerHTML = originalText;
            testBtn.disabled = false;
        }
    }

    async function startDownload() {
        const skip = parseInt(document.getElementById('skip').value) || 0;
        const take = parseInt(document.getElementById('take').value);

        if (!take || take < 1) {
            showAlert('Please specify how many records to process', 'error');
            return;
        }

        const isMinIO = document.querySelector('.storage-option.active').dataset.storage === 'minio';
        const payload = {
            skip,
            take,
            storageType: isMinIO ? 'minio' : 'local'
        };

        if (isMinIO) {
            const requiredFields = {
                endpoint: document.getElementById('endpoint').value,
                accessKeyId: document.getElementById('accessKeyId').value,
                secretAccessKey: document.getElementById('secretAccessKey').value,
                bucket: document.getElementById('bucket').value
            };

            const missingFields = Object.entries(requiredFields)
                .filter(([_, value]) => !value)
                .map(([key]) => key);

            if (missingFields.length > 0) {
                showAlert(`Please fill in all MinIO configuration fields: ${missingFields.join(', ')}`, 'error');
                return;
            }

            Object.assign(payload, requiredFields);
        }

        // Create progress bar
        const progressDiv = document.createElement('div');
        progressDiv.className = 'progress-container fixed-bottom p-3 bg-white border-top';
        progressDiv.innerHTML = `
            <div class="container">
                <div class="row align-items-center">
                    <div class="col">
                        <div class="progress" style="height: 10px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="col-auto">
                        <span class="progress-text">Starting download...</span>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(progressDiv);

        try {
            const response = await fetch('/start-download', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();

            if (result.success) {
                showAlert('Download process completed successfully!', 'success');

                // Update logs section without refresh
                if (result.failedDownloads?.length > 0) {
                    showAlert(`${result.failedDownloads.length} files failed to download. Check console for details.`, 'warning');
                }

                // Reload the page after 2 seconds to show updated logs
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            } else {
                showAlert('Failed to complete download: ' + result.error, 'error');
            }
        } catch (error) {
            showAlert('Error during download process: ' + error.message, 'error');
        } finally {
            // Remove progress bar
            progressDiv.remove();
        }
    }

    // Add input validation
    document.getElementById('take').addEventListener('input', function () {
        const totalCount = <%= totalCount %>;
        const takeValue = parseInt(this.value) || 0;
        const skipValue = parseInt(document.getElementById('skip').value) || 0;

        if (takeValue + skipValue > totalCount) {
            showAlert(`Total records (${takeValue + skipValue}) exceeds available records (${totalCount})`, 'warning');
        }
    });

    // Tooltip initialization (if using Bootstrap 5)
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Save form state to localStorage
    document.querySelectorAll('input').forEach(input => {
        // Load saved value if exists
        const savedValue = localStorage.getItem(`download_${input.id}`);
        if (savedValue && input.type !== 'password') {
            input.value = savedValue;
        }

        // Save value on change
        input.addEventListener('change', function () {
            if (input.type !== 'password') {
                localStorage.setItem(`download_${input.id}`, input.value);
            }
        });
    });
</script>